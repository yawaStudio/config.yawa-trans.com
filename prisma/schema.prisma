generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}
model Role {
  id          String     @id @default(uuid())
  name        String   @unique
  isActiveted Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  User        User[]
}

model User {
  id          String     @id @default(uuid())
  email       String   @unique
  password    String
  name        String?
  roleId      String
  isActiveted Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  account     Account?
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Account {
  id         String      @id @default(uuid())
  name       String
  phone      String?
  img        String?
  companieId String?
  reseauId   String?
  userId     String       @unique
  Companie   Companie? @relation(fields: [companieId], references: [id])
  Reseau     Reseau?   @relation(fields: [reseauId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Device {
  id          String               @id @default(uuid())
  code        String?            @unique
  type        String?            @default("Orange")
  isActiveted Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  attribution DeviceAttribution?
  simId    String @unique
  sim   Sim  @relation(fields: [simId], references: [id])
}
model Sim {
  id          String     @id @default(uuid())
  number      String     @unique
  imsi        String     @unique
  provider    String?    @default("ORANGE")
  isActiveted Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  device Device?
}
model Licence {
  id            String       @id @default(uuid())
  licenceCode   String?
  licenceName   String
  type          String
  frequence     String     @default("Mensuelle")
  licenceAmount String
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  contract      Contract[]
}





model Reseau {
  id               String                @id @default(uuid())
  name             String              @unique
  isActiveted      Boolean             @default(true)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  Account          Account[]
  Companie         Companie[]
  Contract         Contract[]
  Controls         Control[]
  Controller       Controller[]
  Device           DeviceAttribution[]
  Itinerary        Itinerary[]
  Operator         Operator[]
  Regulation       Regulation[]
  Regulator        Regulator[]
  Config           ReseauConfig?
  Rubrics          Rubrics[]
  Selling          Selling[]
  Subscription     Subscription[]
  SubscriptionPlan SubscriptionPlan[]
  Vehicule         Vehicule[]
}

model Contract {
  id               String     @id @default(uuid())
  contractNumber   String   @unique
  contractType     String   @default("Collectif")
  contractorType   String   @default("GIE")
  contractorName   String
  contractorNINEA  String?
  contractorPhone  String?
  contractorEmail  String?
  signatoryName    String
  signatoryCNI     String
  signatoryQuality String   @default("Pr√©sident")
  bobineQuantity   Int      @default(40)
  deviceType       String
  devicceModality  String?
  duration         String   @default("1")
  startDate        DateTime @default(now())
  endDate          DateTime @default(now())
  status           String   @default("active")
  licenceId        String
  companieId       String
  reseauId         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  companie         Companie @relation(fields: [companieId], references: [id])
  licence          Licence  @relation(fields: [licenceId], references: [id])
  reseau           Reseau   @relation(fields: [reseauId], references: [id])
}

model ReseauConfig {
  id               String    @id @default(uuid())
  itinerary        String  @default("global")
  invoicing        String  @default("global")
  depatureDuration Int @default(15)
  agentName        String?
  agentPhone       String?
  agentEmail       String?
  reseauId         String     @unique
  reseau           Reseau  @relation(fields: [reseauId], references: [id])
}

model Companie {
  id          String                @id @default(uuid())
  name        String
  email       String?             @unique
  phone       String?             @unique
  manager     String?
  adress      String?
  type        String?
  logo        String?
  isActiveted Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  ReseauId    String
  Account     Account[]
  Reseau      Reseau              @relation(fields: [ReseauId], references: [id], onDelete: Cascade)
  Contract    Contract[]
  Controls    Control[]
  Device      DeviceAttribution[]
  Itinerary   Itinerary[]
  Operator    Operator[]
  Regulation  Regulation[]
  Rubrics     Rubrics[]
  Selling     Selling[]
  Vehicules   Vehicule[]
}

model Operator {
  id          String                @id @default(uuid())
  name        String
  email       String?             @unique
  phone       String?             @unique
  companieId  String
  isActiveted Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  reseauId    String
  Controls    Control[]
  Device      DeviceAttribution[]
  companie    Companie            @relation(fields: [companieId], references: [id], onDelete: Cascade)
  reseau      Reseau              @relation(fields: [reseauId], references: [id], onDelete: Cascade)
  Selling     Selling[]
  Vehicules   Vehicule[]
}

model Vehicule {
  id          String                @id @default(uuid())
  matricule   String              @unique
  type        String?
  isActiveted Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  operatorId  String
  companieId  String
  reseauId    String
  Controls    Control[]
  device      DeviceAttribution[]
  Selling     Selling[]
  companie    Companie            @relation(fields: [companieId], references: [id], onDelete: Cascade)
  operator    Operator            @relation(fields: [operatorId], references: [id])
  reseau      Reseau              @relation(fields: [reseauId], references: [id], onDelete: Cascade)
}

model DeviceAttribution {
  id          String       @id @default(uuid())
  code        String    @unique @default("2023")
  isActiveted Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deviceId    String       @unique
  operatorId  String
  companieId  String
  vehiculeId  String
  reseauId    String
  companie    Companie  @relation(fields: [companieId], references: [id], onDelete: Cascade)
  device      Device    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  operator    Operator  @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  reseau      Reseau    @relation(fields: [reseauId], references: [id], onDelete: Cascade)
  vehicule    Vehicule  @relation(fields: [vehiculeId], references: [id], onDelete: Cascade)
  Selling     Selling[]
}

model Itinerary {
  id          String          @id @default(uuid())
  name        String
  startPoString  String
  endPoString    String
  distance    Float        @default(0)
  isActiveted Boolean      @default(true)
  companieId  String
  reseauId    String
  Controls    Control[]
  coordinates Coordinate[]
  companie    Companie     @relation(fields: [companieId], references: [id])
  reseau      Reseau       @relation(fields: [reseauId], references: [id], onDelete: Cascade)
  rates       Rate[]
  Regulation  Regulation[]
  selling     Selling[]
}

model Rubrics {
  id          String      @id @default(uuid())
  name        String
  isActiveted Boolean  @default(true)
  companieId  String
  reseauId    String
  companie    Companie @relation(fields: [companieId], references: [id])
  reseau      Reseau   @relation(fields: [reseauId], references: [id])
}

model Coordinate {
  id          String       @id @default(uuid())
  name        String
  latitude    Float
  longitude   Float
  itineraryId String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id])
}

model Rate {
  id          String       @id @default(uuid())
  name        String
  price       String
  itineraryId String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id])
}

model SubscriptionPlan {
  id           String            @id @default(uuid())
  name         String
  price        Float          @default(0)
  duration     Int            @default(1)
  isActive     Boolean        @default(true)
  reseauId     String
  Subscription Subscription[]
  reseau       Reseau         @relation(fields: [reseauId], references: [id])
}

model Controller {
  id          String       @id @default(uuid())
  name        String
  phone       String?   @unique
  password    String?
  gender      String?
  isActiveted Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ReseauId    String
  Controls    Control[]
  Reseau      Reseau    @relation(fields: [ReseauId], references: [id], onDelete: Cascade)
}

model Regulator {
  id          String          @id @default(uuid())
  name        String
  phone       String?      @unique
  password    String?
  gender      String?
  isActiveted Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ReseauId    String
  Regulation  Regulation[]
  Reseau      Reseau       @relation(fields: [ReseauId], references: [id], onDelete: Cascade)
}

model Selling {
  id          String               @id @default(uuid())
  userId      String?
  userName    String?
  revenue     Float             @default(0)
  expense     Float             @default(0)
  solde       Float             @default(0)
  totalTicket Int           @default(0)
  type        String?
  startTime   String?
  endTime     String?
  isActiveted Boolean           @default(true)
  itineraryId String
  deviceId    String
  vehiculeId  String
  operatorId  String
  companieId  String
  reseauId    String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  Controls    Control[]
  Costs       Costs[]
  Rental      Rental[]
  companie    Companie          @relation(fields: [companieId], references: [id], onDelete: Cascade)
  device      DeviceAttribution @relation(fields: [deviceId], references: [id])
  itinerary   Itinerary         @relation(fields: [itineraryId], references: [id])
  operator    Operator          @relation(fields: [operatorId], references: [id])
  reseau      Reseau            @relation(fields: [reseauId], references: [id], onDelete: Cascade)
  vehicule    Vehicule          @relation(fields: [vehiculeId], references: [id])
  Tickets     Ticket[]
  tracking    Tracking[]
  trajet      Trajet[]
}

model Control {
  id             String        @id @default(uuid())
  controllerName String?
  checkedTickets Int    @default(0)
  ticketFraude   Int    @default(0)
  comment        String?
  startTime      DateTime?
  endTime        DateTime?
  controllerId   String
  trajetId       String
  itineraryId    String
  sellingId      String
  operatorId     String
  companieId     String
  vehiculeId     String
  reseauId       String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  companie       Companie   @relation(fields: [companieId], references: [id], onDelete: Cascade)
  controller     Controller @relation(fields: [controllerId], references: [id])
  itinerary      Itinerary  @relation(fields: [itineraryId], references: [id])
  operator       Operator   @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  reseau         Reseau     @relation(fields: [reseauId], references: [id], onDelete: Cascade)
  selling        Selling    @relation(fields: [sellingId], references: [id])
  trajet         Trajet     @relation(fields: [trajetId], references: [id])
  vehicule       Vehicule   @relation(fields: [vehiculeId], references: [id], onDelete: Cascade)
}

model Regulation {
  id          String       @id @default(uuid())
  vehicules   Int   @default(0)
  startTime   DateTime?
  endTime     DateTime?
  regulatorId String
  itineraryId String
  sellingId   String?
  companieId  String
  reseauId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  companie    Companie  @relation(fields: [companieId], references: [id], onDelete: Cascade)
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id])
  regu        Regulator @relation(fields: [regulatorId], references: [id])
  reseau      Reseau    @relation(fields: [reseauId], references: [id], onDelete: Cascade)
}

model Tracking {
  id        String      @id @default(uuid())
  sellingId String
  timestamp DateTime
  latitude  Float
  longitude Float
  speed     Float?
  heading   Float?
  createdAt DateTime @default(now())
  selling   Selling  @relation(fields: [sellingId], references: [id])
}

model Trajet {
  id            String       @id @default(uuid())
  duration      String
  departureTime DateTime
  arrivalTime   DateTime
  distance      Float
  sellingId     String
  Controls      Control[]
  Tickets       Ticket[]
  selling       Selling   @relation(fields: [sellingId], references: [id])
}

model Ticket {
  id               String           @id @default(uuid())
  code             String        @unique
  price            Float
  name             String
  validUntil       DateTime
  startTime        DateTime
  endTime          DateTime
  status           String        @default("online")
  isActivated      Boolean       @default(true)
  walletId         String
  tripId           String
  paymentMethodeId String
  sellingId        String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  paymentMethode   PaymentMethod @relation(fields: [paymentMethodeId], references: [id])
  selling          Selling       @relation(fields: [sellingId], references: [id])
  trip             Trajet        @relation(fields: [tripId], references: [id])
  wallet           Wallet        @relation(fields: [walletId], references: [id])
}

model Rental {
  id            String      @id @default(uuid())
  custumer      String
  custumerPhone String?
  price         Float
  destination   String
  startTime     DateTime
  endTime       DateTime
  isActivated   Boolean  @default(true)
  sellingId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  selling       Selling  @relation(fields: [sellingId], references: [id])
}

model Costs {
  id        String      @id @default(uuid())
  rubrics   String
  amount    Float
  sellingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  selling   Selling  @relation(fields: [sellingId], references: [id])
}

model Passenger {
  id           String            @id @default(uuid())
  name         String
  phone        String         @unique
  email        String         @unique
  cni          String         @unique
  gender       String
  status       String
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
  wallet       Wallet?
}

model Wallet {
  id          String        @id @default(uuid())
  balance     Float      @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  passengerId String        @unique
  recharges   Recharge[]
  Tickets     Ticket[]
  passenger   Passenger  @relation(fields: [passengerId], references: [id])
}

model Recharge {
  id               String           @id @default(uuid())
  amount           Float
  ref              String
  status           String        @default("En cours")
  createdAt        DateTime      @default(now())
  walletId         String
  paymentMethodeId String
  paymentMethode   PaymentMethod @relation(fields: [paymentMethodeId], references: [id])
  wallet           Wallet        @relation(fields: [walletId], references: [id])
}

model PaymentMethod {
  id          String        @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  recharges   Recharge[]
  Tickets     Ticket[]
}

model Subscription {
  id          String              @id @default(uuid())
  passengerId String
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean          @default(true)
  planId      String
  reseauId    String
  passenger   Passenger        @relation(fields: [passengerId], references: [id])
  plan        SubscriptionPlan @relation(fields: [planId], references: [id])
  reseau      Reseau           @relation(fields: [reseauId], references: [id])
}
